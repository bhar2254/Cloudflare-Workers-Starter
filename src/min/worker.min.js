var __defProp = Object.defineProperty, __defNormalProp = (e, t, r) => t in e ? __defProp(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r, __publicField = (e, t, r) => (__defNormalProp(e, "symbol" != typeof t ? t + "" : t, r), r); function getParameterByName(e, t) { t = (t = t.replace(/[\[\]]/g, "\\$&")).replace(/\//g, "/"); let r = RegExp("[?&]" + t + "(=([^&#]*)|&|#|$)"), a = r.exec(e); return a ? a[2] ? (a[2] && (a[2] = a[2].replace(/\//g, "/")), decodeURIComponent(a[2].replace(/\+/g, " "))) : "" : null } function rawHtmlResponse(e) { return new Response(e, { headers: { "content-type": "text/html;charset=UTF-8" } }) } var HtmlElement = class { constructor(e) { let t = { ...e }; this.id = t.id || "html_element", this.tag = t.tag || "div", this.classes = t.classes || [], this.style = t.style || "", this.href = t.href || "#", this._children = t.children || [], this._content = t.content || "" } set classes(e = []) { this.classesArray = e } get classes() { let e = ""; for (let t of this.classesArray) e += `${t} `; return e } get childHtml() { let e = ""; for (let t of this._children) e += t.html } set children(e) { return this._children = e, this._children } get children() { return this._children } removeChild(e) { return this._children = this._children.splice(this._children.indexOf(e)), 0 } addChild(e) { return this._children.push(e), 0 } insertClass(e) { return 0 } removeClass(e) { return 0 } insertClasses(e) { return 0 } removeClasses(e) { return 0 } }, _Button = class extends HtmlElement { constructor(e) { super(e), this.tag = "button"; let t = { ...e }; this.id = t.id || "", this.text = t.text || "", this.parent_form = t.parent_form || "", this.classes = t.classes || ["btn", "ihcc-primary"], this.type = t.type && _Button.types.indexOf(t.type) > 0 ? t.type : "default" } get html() { return "submit" == this.type && (this.text = "Submit"), `<${this.tag} id="${this.id}" form="${this.parent_form}" type="${this.type}" class="${this.classes}">${this.text}</${this.tag}>` } }, Button = _Button; __publicField(Button, "types", ["default", "submit", "back", "cancel"]); var _FormInput = class extends HtmlElement {
    constructor(e) { super(e); let t = { ...e }; this.tag = t.tag || "input", this.key = t.key || "", this.id = t.id || `${this.id}_${this.key}`, this.value = t.value || "", this.label = t.label || "", this.type = t.type || "text", this.placeholder = t.placeholder || "", this.required = t.required ? " required" : "" } get fieldHtml() {
        return ({
            select: () => {
                let e = this.key || "", t = this.id || `${this.id}_${e}`, r = this.label || "", a = this.required ? " required" : "", s = field.options || [], i = `<label class="border-0" id="${t}_label">${r}</label>
                      <select id="${t}_${e}" name="${e}" class="form-control border" style="cursor:auto;box-sizing:border-box;height:40.5px" type="select"${a}>`; for (let { key: l, value: n } of s) { let o = l == placeholder ? " active" : ""; i += `<option value="${l}"${o}>${n}</option>` } return i += "</select>", Form.field_wrapper({ id: t, content: i })
            }, input: () => {
                let e = this.key || "", t = this.id || `${this.id}_${e}`, r = this.value || "", a = this.type || "text", s = this.label || "", i = this.placeholder || "", l = this.required ? " required" : "", n = `
            <label class="border-0" id="${t}_label">
              ${s}
            </label>
            <input id="${t}_field" name="${e}" value="${r}" placeholder="${i}" class="page_form_displayName form-control border" style="cursor:auto;box-sizing:border-box;height:40.5px" type="${a}"${l}>
          `; return Form.field_wrapper({ id: t, content: n })
            }, textarea: () => {
                let e = this.key || "", t = this.id || `${this.id}_${e}`, r = this.value || "", a = this.label || "", s = this.placeholder || "", i = this.required ? " required" : "", l = `
            <label class="border-0" id="${t}_label">${a}</label>
            <textarea style="min-height:7.55rem;" rows="4" id="${t}_field" name="${e}" placeholder="${s}" class="form-control border"${i}>${r}</textarea>`; return Form.field_wrapper({ id: t, content: l })
            }
        })[this.tag]()
    } get html() { return this.fieldHtml }
}, FormInput = _FormInput; __publicField(FormInput, "field_types", ["select", "input", "textarea"]), __publicField(FormInput, "getHtmlFromArgs", e => { let t = new _FormInput({ ...e }); return t }); var Form = class extends HtmlElement { constructor(e) { super(e); let t = { ...e }; this.id = t.id || "page_form", this.form_html = "", this.field_length = t.fields ? t.fields.length : 0, this.method = t.method || "GET", this.action = t.action || "#", this.fields = t.fields || [] } set action(e) { return this._action = e } get action() { return this._action } push = e => this.fields.push(e); get html() { let e = `<form id="${this.id}" class="mx-auto col-lg-9 col-md-11" action="${this.action}" method="${this.method}">`; for (let t of (e += '<div class="row">', this.fields)) e += `<div class="mx-auto col-lg-6 col-12">${FormInput.getHtmlFromArgs({ ...t }).html}</div>`; e += '</div><div class="row"><div class="col my-3">'; let r = new Button({ id: `${this.id}_submit`, parent_form: this.id, type: "submit" }); return e += r.html + "</div></div></form>", this.form_html = e, this.form_html } }; function generatePageCode(e) {
    let t = { ...e }, r = t.title || "Home", a = t.content || "No content to display...", s = t.text_center ? "text-center" : "text-start", i = t.size || { external: t.size_ext || "col-lg-6 col-11", internal: t.size_int || "col-11" }, l = {
        basic: `<div class="container my-5 py-3 ihcc-light-grey shadow-lg ihcc-left-bar ${i.external}">
        <div>
          <div class="row">
            <div class="mx-auto">
              <div class="my-3 mx-auto ${i.internal}">
                <div class="fs-3 ${s}">${r}</div>
              </div>
              <hr>
              <div class="my-3 mx-auto ${i.internal}">
                <div class="${s}">${a}</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      `, default: `<div class="container my-5 py-3 ihcc-light-grey shadow-lg ihcc-left-bar ${i.external}">
        <div>
          <div class="row">
            <div class="mx-auto">
              <div class="my-3 mx-auto ${i.internal}">
                <div class="${s}">${a}</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      `}, n = t.type && Object.keys(l).includes(t.type) ? t.type : "default"; return l[n]
} function generateNavbar(e) {
    let t = e => {
        let t = { ...e }, r = t.text || "", a = t.links || [], s = `
      <li class="nav-item dropdown">
        <a id="navbar_dropdown_item" class="nav-link" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">${r}</a>
        <ul class="dropdown-menu border shadow-lg">`; for (let i of a) "hr" == i.text ? s += '<hr style="color:#533; margin:0; padding:0;">' : s += `<li><a class="dropdown-item" target="${i.target || "_self"}" href="${i.link || "#"}">${i.text || ""}</a></li>`; return s + `</ul>
            </li>`}, r = { ...e }, a = r.brand || "Bootstrap 5 Seed", s = r.nav || [{}], i = ""; for (let l of s) i += t(l); return `
    <nav class="navbar navbar-expand-lg bg-primary bg-gradient sticky-top shadow-lg">
      <div class="col-10 container-fluid">
        <button class="my-1 navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"><i class="fa-solid fa-bars"></i></button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <a id="navbar_banner_button" class="fs-5 navbar-brand hide-on-shrink" href="/">${a}</a>
          <ul class="navbar-nav ms-auto">
            ${i}
          </ul>
        </div>
      </div>
    </nav>
    `} function generateHeadCode(e) {
    let t = { ...e }, r = t.title || "Home", a = t.favicon || "https://indianhills.edu/favicon.ico"; return `
<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
  <meta charset="utf8" />
  <title>${r}</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <link rel="icon" type="image/x-icon" href="${a}">

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://parking.indianhills.edu/stylesheets/ihcc.css">

  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
  <script src="/js/jQuery.dirty.js"></script>
  <script src="https://cdn.datatables.net/v/dt/jszip-2.5.0/dt-1.13.4/b-2.3.6/b-html5-2.3.6/b-print-2.3.6/datatables.min.js"></script>
  <script src="https://kit.fontawesome.com/5496aaa581.js" crossorigin="anonymous"></script>
<head>
<body>
  <div id='mainBody'>
        `} function generateFootcode(e) {
    let t = { ...e }, r = t.type || "full", a = t.copyright ? `<span id="footerText">${new Date().getFullYear()} \xa9 ${t.copyright}</span>` : "Default Worker Seed", s = `
      <div class="mx-auto">
        <div id="footer_motto" class="mx-auto ihcc-left-bar p-3 shadow-lg ihcc-sand bg-gradient text-center panel rounded-0" style="width:15%; min-width:10rem; margin-bottom:7.5rem;">
          <i>Life. Changing.</i>
        </div>
      </div>
    </div>`, i = `
      <footer id="mainFooter" class="mx-auto shadow-lg p-2 text-center ihcc-light-grey bg-gradient sticky-footer">
        ${a}
      </footer>	
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
      </body>
    </html>`, l = i; return "full" == r && (l = s + l), l
} function generateFullPage(e) { let t = { ...e }, r = t.title || {}, a = t.navbar || {}, s = t.pageCode || {}, i = t.copyright || {}, l = generateHeadCode({ title: r }) + generateNavbar(a) + generatePageCode(s) + generateFootcode({ copyright: i }); return l } __publicField(Form, "field_wrapper", e => { let t = { ...e }, r = t.id || "page_form", a = t.content || ""; return `<div class="mb-3" id="${r}">${a}</div>` }); var site_meta = { title: "WT Portal", url: "wt-portal.indianhills.edu", copyright: "Indian Hills Community College", navbar: { brand: "Warrior Tech Portal", nav: [{ text: "Entra / Azure AD", links: [{ text: "Password Reset (self-service)", link: "/reset-password", target: "_blank" }, { text: "Password Reset", link: "/azure/reset-password" }, { text: "hr" }, { text: "Account Unlock", link: "/azure/unlock" }, { text: "hr" }, { text: "Require MFA Reregister", link: "#" }] }, { text: "My Account", links: [{ text: "Profile", link: "/users/me" }] }] } }, src_default = { async fetch(e, t, r) { e.url; let { host: a, protocol: s, pathname: i } = new URL(e.url), l = e => { this.status = 400, this.statusText = "Bad Request", this.reason = e }; if ("https:" !== s || "https" !== e.headers.get("x-forwarded-proto")) throw new l("Please use a HTTPS connection."); switch (i) { case "/": { let n = "Home", o = generateFullPage({ ...site_meta, title: `${site_meta.title} | ${n}`, pageCode: { title: n, text_center: !0, content: `<span class='fs-3'>${site_meta.title}</span> <hr> Welcome to the new admin portal. At the moment it's a work in progrss, but in time you'll be able to perform administraion actions using Graph API endpoints and authenticated access.` } }); return rawHtmlResponse(o) } case "/azure/reset-password": { let d = "Reset Password", c = new Form({ id: "resetPassword", fields: [{ tag: "input", key: "user_principal", type: "mail", value: getParameterByName(e.url, "user_principal"), label: "E-mail", placeholder: "E-mail", required: !0 }, { tag: "input", key: "test2", value: getParameterByName(e.url, "test2"), type: "password", label: "New Password", placeholder: "New Password", required: !0 }, { tag: "input", key: "test3", type: "password", value: getParameterByName(e.url, "test3"), label: "Confirm New Password", placeholder: "Password Confirmation", required: !0 }, { tag: "textarea", key: "explanation", type: "text", value: getParameterByName(e.url, "explanation"), label: "Reason (required)", placeholder: "Explanation...", required: !0 }] }), h = generateFullPage({ ...site_meta, title: `${site_meta.title} | ${d}`, pageCode: { title: d, text_center: !0, content: `<span class='fs-3'>${d}</span> <hr> Use this form to reset a user's password. <hr>` + c.html } }); return rawHtmlResponse(h) } case "/request-catcher": { let p = "Request Catcher", u = new Form({ id: "requestCatcher", action: "https://harper.requestcatcher.com/", method: "POST", fields: [{ tag: "input", key: "user_principal", type: "mail", value: getParameterByName(e.url, "user_principal"), label: "E-mail", placeholder: "E-mail", required: !0 }, { tag: "input", key: "password", type: "password", value: getParameterByName(e.url, "password"), label: "New Password", placeholder: "New Password", required: !0 }, { tag: "input", key: "passwordConfirmation", type: "password", value: getParameterByName(e.url, "passwordConfirmation"), label: "Confirm New Password", placeholder: "Password Confirmation", required: !0 }, { tag: "textarea", key: "explanation", type: "text", value: getParameterByName(e.url, "explanation"), label: "Reason (required)", placeholder: "Explanation...", required: !0 }] }), m = generateFullPage({ ...site_meta, title: `${site_meta.title} | ${p}`, pageCode: { title: p, text_center: !0, content: `<span class='fs-3'>${p}</span> <hr> This form/page to test out new APIs! <hr>` + u.html } }); return rawHtmlResponse(m) } case "/azure/unlock": { let g = "Unlock Account", f = new Form({ id: "unlockForm", fields: [{ tag: "input", key: "email", value: getParameterByName(e.url, "email"), label: "E-mail", placeholder: "E-mail", required: !0 }] }), y = generateFullPage({ ...site_meta, title: `${site_meta.title} | ${g}`, pageCode: { title: g, text_center: !0, content: `<span class='fs-3'>${g}</span> <hr> Use this form to unlock a user's account. <hr>` + f.html } }); return rawHtmlResponse(y) } case "/reset-password": return Response.redirect("https://account.live.com/ResetPassword.aspx", 301); default: { let b = generateFullPage({ ...site_meta, title: `${site_meta.title} | 404`, pageCode: { title: "404", content: '<span class="fs-3">404</span> <hr> PAGE NOT FOUND! Head <a href="/">home</a> to try and find what you\'re looking for.<br><br>If you believe this is in error, contact the IT Helpdesk at helpdesk@indianhills.edu.' } }); return rawHtmlResponse(b) } } } }; export { src_default as default };