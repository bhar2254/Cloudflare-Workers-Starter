export class HtmlElement { constructor(t) { let e = { ...t }; this.id = e.id || "html_element", this.tag = e.tag || "div", this.classes = e.classes || [], this.style = e.style || "", this.href = e.href || "#", this._children = e.children || [], this._content = e.content || "" } set classes(t = []) { this.classesArray = t } get classes() { let t = ""; for (let e of this.classesArray) t += `${e} `; return t } get childHtml() { let t = ""; for (let e of this._children) t += e.html } set children(t) { return this._children = t, this._children } get children() { return this._children } removeChild(t) { return this._children = this._children.splice(this._children.indexOf(t)), 0 } addChild(t) { return this._children.push(t), 0 } insertClass(t) { return 0 } removeClass(t) { return 0 } insertClasses(t) { return 0 } removeClasses(t) { return 0 } } export class Button extends HtmlElement { static types = ["default", "submit", "back", "cancel"]; constructor(t) { super(t), this.tag = "button"; let e = { ...t }; this.id = e.id || "", this.text = e.text || "", this.parent_form = e.parent_form || "", this.classes = e.classes || ["btn", "ihcc-primary"], this.type = e.type && Button.types.indexOf(e.type) > 0 ? e.type : "default" } get html() { return "submit" == this.type && (this.text = "Submit"), `<${this.tag} id="${this.id}" form="${this.parent_form}" type="${this.type}" class="${this.classes}">${this.text}</${this.tag}>` } } export class ButtonBar extends HtmlElement { static types = ["group", "toolbar"]; constructor(t) { super(t); let e = { ...t }; this._children = buttonArray, this.type = e.type || "group", this.classes = [`btn-${this.type}`] } get content() { for (let t of this._children) response += t.html; return response } get html() { for (let t of (this.tag, this.classes, this._children)) response += t.html; return response + `</${this.tag}>` } } export class DataTable extends HtmlElement { constructor(t) { super(t) } } export class FormInput extends HtmlElement {
  static field_types = ["select", "input", "textarea"]; static getHtmlFromArgs = t => { let e = new FormInput({ ...t }); return e }; constructor(t) { super(t); let e = { ...t }; this.tag = e.tag || "input", this.key = e.key || "", this.id = e.id || `${this.id}_${this.key}`, this.value = e.value || "", this.label = e.label || "", this.type = e.type || "text", this.placeholder = e.placeholder || "", this.required = e.required ? " required" : "" } get fieldHtml() {
    return ({
      select: () => {
        let t = this.key || "", e = this.id || `${this.id}_${t}`, s = this.label || "", i = this.required ? " required" : "", r = field.options || [], l = `<label class="border-0" id="${e}_label">${s}</label>
                      <select id="${e}_${t}" name="${t}" class="form-control border" style="cursor:auto;box-sizing:border-box;height:40.5px" type="select"${i}>`; for (let { key: a, value: n } of r) { let o = a == placeholder ? " active" : ""; l += `<option value="${a}"${o}>${n}</option>` } return l += "</select>", Form.field_wrapper({ id: e, content: l })
      }, input: () => {
        let t = this.key || "", e = this.id || `${this.id}_${t}`, s = this.value || "", i = this.type || "text", r = this.label || "", l = this.placeholder || "", a = this.required ? " required" : "", n = `
            <label class="border-0" id="${e}_label">
              ${r}
            </label>
            <input id="${e}_field" name="${t}" value="${s}" placeholder="${l}" class="page_form_displayName form-control border" style="cursor:auto;box-sizing:border-box;height:40.5px" type="${i}"${a}>
          `; return Form.field_wrapper({ id: e, content: n })
      }, textarea: () => {
        let t = this.key || "", e = this.id || `${this.id}_${t}`, s = this.value || "", i = this.label || "", r = this.placeholder || "", l = this.required ? " required" : "", a = `
            <label class="border-0" id="${e}_label">${i}</label>
            <textarea style="min-height:7.55rem;" rows="4" id="${e}_field" name="${t}" placeholder="${r}" class="form-control border"${l}>${s}</textarea>`; return Form.field_wrapper({ id: e, content: a })
      }
    })[this.tag]()
  } get html() { return this.fieldHtml }
} export class Form extends HtmlElement { static field_wrapper = t => { let e = { ...t }, s = e.id || "page_form", i = e.content || ""; return `<div class="mb-3" id="${s}">${i}</div>` }; constructor(t) { super(t); let e = { ...t }; this.id = e.id || "page_form", this.form_html = "", this.field_length = e.fields ? e.fields.length : 0, this.method = e.method || "GET", this.action = e.action || "#", this.fields = e.fields || [] } set action(t) { return this._action = t } get action() { return this._action } push = t => this.fields.push(t); get html() { let t = `<form id="${this.id}" class="mx-auto col-lg-9 col-md-11" action="${this.action}" method="${this.method}">`; for (let e of (t += '<div class="row">', this.fields)) t += `<div class="mx-auto col-lg-6 col-12">${FormInput.getHtmlFromArgs({ ...e }).html}</div>`; t += '</div><div class="row"><div class="col my-3">'; let s = new Button({ id: `${this.id}_submit`, parent_form: this.id, type: "submit" }); return t += s.html + "</div></div></form>", this.form_html = t, this.form_html } } export class Gallery extends HtmlElement { constructor(t) { super(t) } } export class Header extends HtmlElement {
  constructor(t) {
    super(t); let e = { ...t }; this.title = e.title || "Home", this.favicon_link = e.favicon || "https://indianhills.edu/favicon.ico", this.body`
<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
  <meta charset="utf8" />
  <title>${title}</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <link rel="icon" type="image/x-icon" href="${this.favicon_link}">

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://parking.indianhills.edu/stylesheets/ihcc.css">

  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
  <script src="/js/jQuery.dirty.js"></script>
  <script src="https://cdn.datatables.net/v/dt/jszip-2.5.0/dt-1.13.4/b-2.3.6/b-html5-2.3.6/b-print-2.3.6/datatables.min.js"></script>
  <script src="https://kit.fontawesome.com/5496aaa581.js" crossorigin="anonymous"></script>
<head>
<body>
  <div id='mainBody'> `}
} export class Navbar extends HtmlElement { constructor(t) { super(t) } } export class Footer extends HtmlElement { constructor(t) { super(t) } } export class Page extends HtmlElement { constructor(t) { super(t); let e = { ...t }; this.title = e.title || "Home", this.content = e.content || "No content to display...", this.text_center = e.text_center ? "text-center" : "text-start", this.size = e.size || { external: e.size_ext || "col-lg-6 col-11", internal: e.size_int || "col-11" } } } export function generatePageCode(t) {
  let e = { ...t }, s = e.title || "Home", i = e.content || "No content to display...", r = e.text_center ? "text-center" : "text-start", l = e.size || { external: e.size_ext || "col-lg-6 col-11", internal: e.size_int || "col-11" }, a = {
    basic: `<div class="container my-5 py-3 ihcc-light-grey shadow-lg ihcc-left-bar ${l.external}">
        <div>
          <div class="row">
            <div class="mx-auto">
              <div class="my-3 mx-auto ${l.internal}">
                <div class="fs-3 ${r}">${s}</div>
              </div>
              <hr>
              <div class="my-3 mx-auto ${l.internal}">
                <div class="${r}">${i}</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      `, default: `<div class="container my-5 py-3 ihcc-light-grey shadow-lg ihcc-left-bar ${l.external}">
        <div>
          <div class="row">
            <div class="mx-auto">
              <div class="my-3 mx-auto ${l.internal}">
                <div class="${r}">${i}</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      `}, n = e.type && Object.keys(a).includes(e.type) ? e.type : "default"; return a[n]
} export function generateNavbar(t) {
  let e = t => {
    let e = { ...t }, s = e.text || "", i = e.links || [], r = `
      <li class="nav-item dropdown">
        <a id="navbar_dropdown_item" class="nav-link" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">${s}</a>
        <ul class="dropdown-menu border shadow-lg">`; for (let l of i) "hr" == l.text ? r += '<hr style="color:#533; margin:0; padding:0;">' : r += `<li><a class="dropdown-item" target="${l.target || "_self"}" href="${l.link || "#"}">${l.text || ""}</a></li>`; return r + `</ul>
            </li>`}, s = { ...t }, i = s.brand || "Bootstrap 5 Seed", r = s.nav || [{}], l = ""; for (let a of r) l += e(a); return `
    <nav class="navbar navbar-expand-lg bg-primary bg-gradient sticky-top shadow-lg">
      <div class="col-10 container-fluid">
        <button class="my-1 navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"><i class="fa-solid fa-bars"></i></button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <a id="navbar_banner_button" class="fs-5 navbar-brand hide-on-shrink" href="/">${i}</a>
          <ul class="navbar-nav ms-auto">
            ${l}
          </ul>
        </div>
      </div>
    </nav>
    `} export function generateHeadCode(t) {
      let e = { ...t }, s = e.title || "Home", i = e.favicon || "https://indianhills.edu/favicon.ico"; return `
<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
  <meta charset="utf8" />
  <title>${s}</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <link rel="icon" type="image/x-icon" href="${i}">

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://parking.indianhills.edu/stylesheets/ihcc.css">

  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
  <script src="/js/jQuery.dirty.js"></script>
  <script src="https://cdn.datatables.net/v/dt/jszip-2.5.0/dt-1.13.4/b-2.3.6/b-html5-2.3.6/b-print-2.3.6/datatables.min.js"></script>
  <script src="https://kit.fontawesome.com/5496aaa581.js" crossorigin="anonymous"></script>
<head>
<body>
  <div id='mainBody'>
        `} export function generateFootcode(t) {
          let e = { ...t }, s = e.type || "full", i = e.copyright ? `<span id="footerText">${new Date().getFullYear()} \xa9 ${e.copyright}</span>` : "Default Worker Seed", r = `
      <div class="mx-auto">
        <div id="footer_motto" class="mx-auto ihcc-left-bar p-3 shadow-lg ihcc-sand bg-gradient text-center panel rounded-0" style="width:15%; min-width:10rem; margin-bottom:7.5rem;">
          <i>Life. Changing.</i>
        </div>
      </div>
    </div>`, l = `
      <footer id="mainFooter" class="mx-auto shadow-lg p-2 text-center ihcc-light-grey bg-gradient sticky-footer">
        ${i}
      </footer>	
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
      </body>
    </html>`, a = l; return "full" == s && (a = r + a), a
} export function generateFullPage(t) { let e = { ...t }, s = e.title || {}, i = e.navbar || {}, r = e.pageCode || {}, l = e.copyright || {}, a = generateHeadCode({ title: s }) + generateNavbar(i) + generatePageCode(r) + generateFootcode({ copyright: l }); return a }